// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Application Load Balancer (ALB) Listener Acl Attachment resource.
 *
 * For information about Application Load Balancer (ALB) Listener Acl Attachment and how to use it, see [What is Listener Acl Attachment](https://www.alibabacloud.com/help/en/server-load-balancer/latest/associateaclswithlistener).
 *
 * > **NOTE:** Available in v1.163.0+.
 *
 * > **NOTE:** You can associate at most three ACLs with a listener.
 *
 * > **NOTE:** You can only configure either a whitelist or a blacklist for listener, not at the same time.
 *
 * ## Example Usage
 *
 * Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as alicloud from "@pulumi/alicloud";
 *
 * const defaultResourceGroups = alicloud.resourcemanager.getResourceGroups({});
 * const defaultAcl = new alicloud.alb.Acl("defaultAcl", {
 *     aclName: "example_value",
 *     resourceGroupId: defaultResourceGroups.then(defaultResourceGroups => defaultResourceGroups.groups?[0]?.id),
 *     aclEntries: [{
 *         description: "description",
 *         entry: "10.0.0.0/24",
 *     }],
 * });
 * const defaultZones = alicloud.alb.getZones({});
 * const defaultNetworks = alicloud.vpc.getNetworks({
 *     nameRegex: "default-NODELETING",
 * });
 * const default1 = Promise.all([defaultNetworks, defaultZones]).then(([defaultNetworks, defaultZones]) => alicloud.vpc.getSwitches({
 *     vpcId: defaultNetworks.ids?[0],
 *     zoneId: defaultZones.zones?[0]?.id,
 * }));
 * const default2 = Promise.all([defaultNetworks, defaultZones]).then(([defaultNetworks, defaultZones]) => alicloud.vpc.getSwitches({
 *     vpcId: defaultNetworks.ids?[0],
 *     zoneId: defaultZones.zones?[1]?.id,
 * }));
 * const defaultLoadBalancer = new alicloud.alb.LoadBalancer("defaultLoadBalancer", {
 *     vpcId: defaultNetworks.then(defaultNetworks => defaultNetworks.ids?[0]),
 *     addressType: "Internet",
 *     addressAllocatedMode: "Fixed",
 *     loadBalancerName: "example_value",
 *     loadBalancerEdition: "Standard",
 *     resourceGroupId: defaultResourceGroups.then(defaultResourceGroups => defaultResourceGroups.groups?[0]?.id),
 *     loadBalancerBillingConfig: {
 *         payType: "PayAsYouGo",
 *     },
 *     tags: {
 *         Created: "TF",
 *     },
 *     zoneMappings: [
 *         {
 *             vswitchId: default1.then(default1 => default1.ids?[0]),
 *             zoneId: defaultZones.then(defaultZones => defaultZones.zones?[0]?.id),
 *         },
 *         {
 *             vswitchId: default2.then(default2 => default2.ids?[0]),
 *             zoneId: defaultZones.then(defaultZones => defaultZones.zones?[1]?.id),
 *         },
 *     ],
 *     modificationProtectionConfig: {
 *         status: "NonProtection",
 *     },
 * });
 * const defaultServerGroup = new alicloud.alb.ServerGroup("defaultServerGroup", {
 *     protocol: "HTTP",
 *     vpcId: defaultNetworks.then(defaultNetworks => defaultNetworks.vpcs?[0]?.id),
 *     serverGroupName: "example_value",
 *     resourceGroupId: defaultResourceGroups.then(defaultResourceGroups => defaultResourceGroups.groups?[0]?.id),
 *     healthCheckConfig: {
 *         healthCheckEnabled: false,
 *     },
 *     stickySessionConfig: {
 *         stickySessionEnabled: false,
 *     },
 *     tags: {
 *         Created: "TF",
 *     },
 * });
 * const defaultListener = new alicloud.alb.Listener("defaultListener", {
 *     loadBalancerId: defaultLoadBalancer.id,
 *     listenerProtocol: "HTTP",
 *     listenerPort: 80,
 *     listenerDescription: "example_value",
 *     defaultActions: [{
 *         type: "ForwardGroup",
 *         forwardGroupConfig: {
 *             serverGroupTuples: [{
 *                 serverGroupId: defaultServerGroup.id,
 *             }],
 *         },
 *     }],
 * });
 * const defaultListenerAclAttachment = new alicloud.alb.ListenerAclAttachment("defaultListenerAclAttachment", {
 *     aclId: defaultAcl.id,
 *     listenerId: defaultListener.id,
 *     aclType: "White",
 * });
 * ```
 *
 * ## Import
 *
 * Application Load Balancer (ALB) Listener Acl Attachment can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import alicloud:alb/listenerAclAttachment:ListenerAclAttachment example <listener_id>:<acl_id>
 * ```
 */
export class ListenerAclAttachment extends pulumi.CustomResource {
    /**
     * Get an existing ListenerAclAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListenerAclAttachmentState, opts?: pulumi.CustomResourceOptions): ListenerAclAttachment {
        return new ListenerAclAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:alb/listenerAclAttachment:ListenerAclAttachment';

    /**
     * Returns true if the given object is an instance of ListenerAclAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ListenerAclAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ListenerAclAttachment.__pulumiType;
    }

    /**
     * The ID of the Acl.
     */
    public readonly aclId!: pulumi.Output<string>;
    /**
     * The type of the ACL. Valid values: 
     * - White: a whitelist. Only requests from the IP addresses or CIDR blocks in the ACL are forwarded. The whitelist applies to scenarios in which you want to allow only specific IP addresses to access an application. Risks may arise if you specify an ACL as a whitelist. After a whitelist is configured, only IP addresses in the whitelist can access the Application Load Balancer (ALB) listener. If you enable a whitelist but the whitelist does not contain an IP address, the listener forwards all requests.
     * - Black: a blacklist. All requests from the IP addresses or CIDR blocks in the ACL are blocked. The blacklist applies to scenarios in which you want to block access from specific IP addresses to an application. If you enable a blacklist but the blacklist does not contain an IP address, the listener forwards all requests.
     */
    public readonly aclType!: pulumi.Output<string>;
    /**
     * The ID of the ALB listener.
     */
    public readonly listenerId!: pulumi.Output<string>;
    /**
     * The status of the Listener Acl Attachment.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a ListenerAclAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListenerAclAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListenerAclAttachmentArgs | ListenerAclAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListenerAclAttachmentState | undefined;
            resourceInputs["aclId"] = state ? state.aclId : undefined;
            resourceInputs["aclType"] = state ? state.aclType : undefined;
            resourceInputs["listenerId"] = state ? state.listenerId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as ListenerAclAttachmentArgs | undefined;
            if ((!args || args.aclId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclId'");
            }
            if ((!args || args.aclType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclType'");
            }
            if ((!args || args.listenerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerId'");
            }
            resourceInputs["aclId"] = args ? args.aclId : undefined;
            resourceInputs["aclType"] = args ? args.aclType : undefined;
            resourceInputs["listenerId"] = args ? args.listenerId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ListenerAclAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ListenerAclAttachment resources.
 */
export interface ListenerAclAttachmentState {
    /**
     * The ID of the Acl.
     */
    aclId?: pulumi.Input<string>;
    /**
     * The type of the ACL. Valid values: 
     * - White: a whitelist. Only requests from the IP addresses or CIDR blocks in the ACL are forwarded. The whitelist applies to scenarios in which you want to allow only specific IP addresses to access an application. Risks may arise if you specify an ACL as a whitelist. After a whitelist is configured, only IP addresses in the whitelist can access the Application Load Balancer (ALB) listener. If you enable a whitelist but the whitelist does not contain an IP address, the listener forwards all requests.
     * - Black: a blacklist. All requests from the IP addresses or CIDR blocks in the ACL are blocked. The blacklist applies to scenarios in which you want to block access from specific IP addresses to an application. If you enable a blacklist but the blacklist does not contain an IP address, the listener forwards all requests.
     */
    aclType?: pulumi.Input<string>;
    /**
     * The ID of the ALB listener.
     */
    listenerId?: pulumi.Input<string>;
    /**
     * The status of the Listener Acl Attachment.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ListenerAclAttachment resource.
 */
export interface ListenerAclAttachmentArgs {
    /**
     * The ID of the Acl.
     */
    aclId: pulumi.Input<string>;
    /**
     * The type of the ACL. Valid values: 
     * - White: a whitelist. Only requests from the IP addresses or CIDR blocks in the ACL are forwarded. The whitelist applies to scenarios in which you want to allow only specific IP addresses to access an application. Risks may arise if you specify an ACL as a whitelist. After a whitelist is configured, only IP addresses in the whitelist can access the Application Load Balancer (ALB) listener. If you enable a whitelist but the whitelist does not contain an IP address, the listener forwards all requests.
     * - Black: a blacklist. All requests from the IP addresses or CIDR blocks in the ACL are blocked. The blacklist applies to scenarios in which you want to block access from specific IP addresses to an application. If you enable a blacklist but the blacklist does not contain an IP address, the listener forwards all requests.
     */
    aclType: pulumi.Input<string>;
    /**
     * The ID of the ALB listener.
     */
    listenerId: pulumi.Input<string>;
}
